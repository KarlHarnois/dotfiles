"
"
" .vimrc.local file of Nicolas Duvieusart Dery
"
" last edited  September 18th 2012
"
"


"---------------------------------------------------------------------
" GENERAL
"---------------------------------------------------------------------
" Tell VIM that we will be using a dark background
set background=dark
" set background=light

" F*** relative line numbers, you never know where you are.
" set nu
" They actually could be cool..!
set relativenumber

" DON'T wrap long lines
set nowrap
" set linebreak
" set wrapmargin=0
" set formatoptions+=qrn1
set colorcolumn=80

" indent at the same level of the previous line
set smartindent
set autoindent

" for when moving text (shift + >> \ shift + <<)
set shiftwidth=2

" change the width of the tab character
set tabstop=2

" when pressing <TAB>, uses the amount of softtabstop if set
set expandtab

" affect what happens when pressing <TAB> or <BS>
set softtabstop=2

" make the tab key (in insert mode) insert spaces to go to the next indent of the
" next tabstop when the cursor is at the beginning of a line
set smarttab

" set the space between each line to 5
set linespace=0

set scrolloff=0

" lower the timeout when typing leader key followed by a command
" set timeoutlen=300
" set ttimeoutlen=0

" auto format comments block
set comments=sl:/**,mb:\ *,elx:\ */

" - instead of + to add a word designator...
set isk-=.                    " '.' is an end of word designator
set isk-=#                    " '#' is an end of word designator
set isk-=-                    " '-' is an end of word designator

set ignorecase                  " Case insensitive search
set smartcase                   " Case sensitive when uc present


"---------------------------------------------------------------------
" KEY MAPPING
"---------------------------------------------------------------------
nnoremap <silent> <D-r> :CtrlPMixed<CR>
nmap <Leader>f :CtrlPLine<CR>
let g:ctrlp_cache_dir = $HOME . '/.cache/ctrlp'
set wildignore+=*/tmp/*,*.so,*.swp,*.zip
" let g:ctrlp_extensions = ['mixed', 'buffertag', 'tag', 'line', 'dir']
let g:ctrlp_dotfiles = 0
let g:ctrlp_buftag_ctags_bin    = '/usr/local/bin/ctags'
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.?(atom|git|hg|svn|vim|vimbackup|vimswap|vimundo|viewviews|sass-cache|cache|node_module)$',
  \ 'file': '\v\.(exe|so|dll|pyc)$',
  \ }

" Tabular mapping
if exists(":Tabularize")
  nmap <Leader>a= :Tabularize /=<CR>
  vmap <Leader>a= :Tabularize /=<CR>
  nmap <Leader>a: :Tabularize /:\zs<CR>
  vmap <Leader>a: :Tabularize /:\zs<CR>
endif

if has('gui_running')
  " Easier moving in tabs and windows
  " spf13 version had "_" for vertical/horizontal splits, which caused them to
  " minize upon switching buffer, I didn't like that behavior.
  let g:spf13_no_easyWindows = 1
  map <C-J> <C-W>j<C-W>
  map <C-K> <C-W>k<C-W>
  map <C-L> <C-W>l<C-W>
  map <C-H> <C-W>h<C-W>
else
  let g:tmux_navigator_no_mappings = 1

  nnoremap <silent> <C-H> :TmuxNavigateLeft<cr>
  nnoremap <silent> <C-J> :TmuxNavigateDown<cr>
  nnoremap <silent> <C-K> :TmuxNavigateUp<cr>
  nnoremap <silent> <C-L> :TmuxNavigateRight<cr>
  " nnoremap <silent> {Previous-Mapping} :TmuxNavigatePrevious<cr>

  let g:tmux_navigator_save_on_switch = 1
endif

" remap <space> to : (colon)
nmap <space> :

" remap jj to <esc>
inoremap jj <esc>

" map + to :!touch (to touch a file)
map + :!touch

cabbrev fastgrep noautocmd vimgrep


"---------------------------------------------------------------------
" syntax highlighting
"---------------------------------------------------------------------
au BufRead,BufNewFile *.make set ft=dosini
au BufRead,BufNewFile *.info set ft=dosini
au BufRead,BufNewFile *.ctp set ft=php.html
au BufRead,BufNewFile *.twig set ft=html
au BufRead,BufNewFile *.handlebars set ft=html
au BufRead,BufNewFile *.pp set ft=ruby


"---------------------------------------------------------------------
" Per filetype
"---------------------------------------------------------------------
autocmd FileType php setlocal shiftwidth=4 tabstop=4 softtabstop=4
autocmd FileType php.html setlocal shiftwidth=4 tabstop=4 softtabstop=4


"---------------------------------------------------------------------
" Formatting
"---------------------------------------------------------------------
" autocmd FileType php.html autocmd BufWritePre <buffer> if !exists('g:spf13_keep_trailing_whitespace') | call StripTrailingWhitespace() | endif
autocmd BufWritePre <buffer> if !exists('g:spf13_keep_trailing_whitespace') | call StripTrailingWhitespace() | endif
" http://calebthompson.io/crontab-and-vim-sitting-in-a-tree/
autocmd filetype crontab setlocal nobackup nowritebackup


"---------------------------------------------------------------------
" plugins
"---------------------------------------------------------------------
" change tComment shortcut to <Leader>c
 map <leader>c <c-_><c-_>

" map <leader>f- to unfold all code
nmap <leader>f- :set foldlevel=100<CR>

" search current word with <leader>d
nmap <silent> <leader>d <Plug>DashSearch

" let g:dash_map = {
"   \ 'ruby' :        'rails',
"   \ 'python' :      'python2',
"   \ 'html' :        ['fa', 'wordpress'],
"   \ 'php' :         'wordpress',
"   \ 'javascript' :  ['backbone', 'marionette', 'nodejs', 'angularjs', 'd3', 'grunt', 'meteor'],
"   \ 'css' :         ['bootstrap', 'compass', 'sass']
"   \ }

" jsx syntax highlighting in .js files
let g:jsx_ext_required = 0

" setting the author var for SnipMate
let g:snips_author = 'Nicolas Duvieusart Dery <nddery@gmail.com>'

" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" imap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

" " disable NERDTree from opening on startup
" let g:nerdtree_tabs_open_on_gui_startup = 0

" " Set neocompletecache cache directory
" " let g:neocomplcache_temporary_dir="$HOME/.vim/tmp/neocomplcache"

" Do not break on first line
" Vdebug
let g:vdebug_keymap = {
  \ 'run_to_cursor' : '<Down>',
  \ 'step_over' : '<Up>',
  \ 'step_into' : '<Left>',
  \ 'step_out' : '<Right>'
  \ }
"  \ 'run' : '<Leader>\',
"  \ 'close' : 'q',
"  \ 'detach' : 'x',
"  \ 'set_breakpoint' : '<Leader>p',
"  \ 'eval_visual' : '<Leader>e'

let g:vdebug_options = {
  \ 'break_on_open' : 0
  \ }

let g:neomake_javascript_enabled_makers = ['eslint']
let g:neomake_error_sign = {
  \ 'text': '>>',
  \ 'texthl': 'ErrorMsg',
  \ }
autocmd! BufWritePost * Neomake
" let g:syntastic_javascript_checkers=['eslint']
" let g:syntastic_javascript_standard_exec = 'semistandard'
" autocmd bufwritepost *.js silent !eslint %
set autoread

" let g:hybrid_custom_term_colors = 1
" let g:hybrid_reduced_contrast = 1
" colorscheme hybrid
" colorscheme hybrid_material

let g:solarized_contrast = "high" "high, normal or low
let g:solarized_visibility= "high"
colorscheme solarized

"---------------------------------------------------------------------
" IF HAS GUI RUNNING (instead of using .gvimrc)
"---------------------------------------------------------------------
if has('gui_running')

  " Transparency is way cool
  set transparency=5

  " set the font and font-size to use
  " set guifont=Roboto\ Mono\ Thin\ for\ Powerline:h18
  set guifont=Roboto\ Mono\ Light\ for\ Powerline:h17
  " set guifont=Fira\ Mono\ for\ Powerline:h16
  " set guifont=Source\ Code\ Pro\ for\ Powerline:h16
  " set guifont=SF\ Mono\ Light:h16

  " set default width (lines) and height (columns)
  set lines=120
  set columns=90
"
"   " automatically enable mouse usage
"   set mouse=a

  " remove the toolbar
  set guioptions-=T

  " remove the scrollbar
  set guioptions-=r

  " remove the left scrollbar
  set guioptions-=L

  " DON'T wrap long lines
  set textwidth=0

  " full screen takes all horizontal space
  set fuopt+=maxhorz " grow to maximum horizontal width on entering fullscreen mode

  " disable errorbells and enable visual bell
  set vb t_vb=

  " macmenu &Edit.Find.Find\.\.\. key=<nop> " free up Command-F
  map <leader>fu :set invfu
else
  " disable errorbells and enable visual bell
  set noeb vb t_vb=
endif

" switch cursor from block in insert mode
" """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" " This enables iterm cursor changes from vim. In .tmux.conf you'll need:
" " set-option -g terminal-overrides
" '*88col*:colors=88,*256col*:colors=256,xterm*:XT:Ms=\E]52;%p1%s;%p2%s\007:Cc=\E]12;%p1%s\007:Cr=\E]112\007:Cs=\E]50;CursorShape=%?%p1%{3}%<%t%{0}%e%p1%{2}%-%;%d\007'
" "
"  " Source:
"  https://github.com/Casecommons/casecommons_workstation/blob/master/templates/default/dot_tmux.conf.erb
"  "
"  https://github.com/Casecommons/vim-config/blob/master/init/tmux.vim
"  """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" if exists('$ITERM_PROFILE')
"   if exists('$TMUX')
"     let &t_SI = "\<Esc>[3 q"
"     let &t_EI = "\<Esc>[0 q"
"   else
"     let &t_SI = "\<Esc>]50;CursorShape=1\x7"
"     let &t_EI = "\<Esc>]50;CursorShape=0\x7"
"   endif
" end

" Local overrides
if filereadable(expand("~/.vimrc.local.overrides"))
  source ~/.vimrc.local.overrides
endif
