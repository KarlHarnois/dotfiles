" vim: set foldmarker={,} foldlevel=0 foldmethod=marker spell:

" Plug {
    call plug#begin()
      " General {
        Plug 'tpope/vim-sensible'
        Plug 'mileszs/ack.vim'
        Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
        Plug 'altercation/vim-colors-solarized'
        Plug 'myusuf3/numbers.vim'
        Plug 'neomake/neomake'
        Plug 'janko-m/vim-test'
        Plug 'airblade/vim-gitgutter'
        Plug 'tpope/vim-fugitive'
        Plug 'darfink/vim-plist', { 'for': 'plist' }
        Plug 'tomtom/tcomment_vim'
        Plug 'jlanzarotta/bufexplorer'
        Plug 'rizzatti/dash.vim'
        Plug 'christoomey/vim-tmux-navigator'
        Plug 'tpope/vim-surround'
        Plug 'rhysd/conflict-marker.vim'
        Plug 'jiangmiao/auto-pairs'
        Plug 'ctrlpvim/ctrlp.vim'
        Plug 'matchit.zip'
        Plug 'Lokaltog/powerline', { 'rtp':'/powerline/bindings/vim' }
        Plug 'powerline/fonts'
        Plug 'bling/vim-bufferline'
        Plug 'easymotion/vim-easymotion'
        Plug 'flazz/vim-colorschemes'
        Plug 'mbbill/undotree'
        Plug 'nathanaelkane/vim-indent-guides'
        " Plug 'vim-scripts/restore_view.vim'
        Plug 'gcmt/wildfire.vim'
        Plug 'godlygeek/tabular'
        if executable('ctags')
          Plug 'majutsushi/tagbar'
        endif
      " }

      " AutoComplete {
        Plug 'Valloric/YouCompleteMe', { 'do': './install.py --clang-completer --tern-completer' }
        Plug 'SirVer/ultisnips'
        Plug 'honza/vim-snippets'
      " }

      " PHP {
        Plug 'shawncplus/phpcomplete.vim'
        Plug 'arnaud-lb/vim-php-namespace'
      " }

      " Javascript {
        Plug 'elzr/vim-json'
        Plug 'pangloss/vim-javascript'
        Plug 'jelera/vim-javascript-syntax'
        Plug 'ternjs/tern_for_vim', { 'do': 'yarn' }
        Plug 'mxw/vim-jsx'
      " }

      " Ruby {
        Plug 'tpope/vim-rails'
      " }

      " HTML {
        Plug 'alvan/vim-closetag'
      " }

      " CSS {
        Plug 'hail2u/vim-css3-syntax'
        Plug 'cakebaker/scss-syntax.vim'
      " }

      " Template highlighting {
        Plug 'slim-template/vim-slim'
      " }
    call plug#end()
" }

" General {
    nmap <space> :
    inoremap jj <esc>

    let g:ackprg = 'ag --nogroup --nocolor --column --smart-case'
    nmap <leader>fw :Ack <C-R><C-W><CR>
    nmap <leader>ff :CtrlPMixed <C-R><C-W>

    let g:solarized_contrast = "high" "high, normal or low
    let g:solarized_visibility= "high"
    colorscheme solarized

    set mouse=a
    " enable pane resize with the mouse inside of tmux
    if &term =~ '^screen'
      set ttymouse=xterm2
    endif
    set background=dark
    " set nowrap
    set relativenumber
    set colorcolumn=80
    set shortmess+=filmnrxoOtT	" Abbrev. of messages (avoids 'hit enter')
    set virtualedit=onemore 	" Allow cursor beyond last character
    set spell
    set autoread " auto read files when they change
    set hidden 			" Allow buffer switching without saving
    set iskeyword-=.                " '.' is an end of word designator
    set iskeyword-=#                " '#' is an end of word designator
    set iskeyword-=-                " '-' is an end of word designator

    if has('clipboard')
      if has('unnamedplus') " When possible use + register for copy-paste
        set clipboard=unnamed,unnamedplus
      else " On mac and Windows, use * register for copy-paste
        set clipboard=unnamed
      endif
    endif

    " Instead of reverting the cursor to the last position in the buffer, we
    " set it to the first line when editing a git commit message
    au FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])

    " http://vim.wikia.com/wiki/Restore_cursor_to_file_position_in_previous_editing_session
    " Restore cursor to file position in previous editing session
    function! ResCur()
      if line("'\"") <= line("$")
        silent! normal! g`"
        return 1
      endif
    endfunction

    augroup resCur
      autocmd!
      autocmd BufWinEnter * call ResCur()
    augroup END

    map <C-J> <C-W>j<C-W>
    map <C-K> <C-W>k<C-W>
    map <C-L> <C-W>l<C-W>
    map <C-H> <C-W>h<C-W>

    " Setting up the directories {
      set backup                  " Backups are nice ...
      if has('persistent_undo')
        set undofile                " So is persistent undo ...
        set undolevels=1000         " Maximum number of changes that can be undone
        set undoreload=10000        " Maximum number lines to save for undo on a buffer reload
      endif
    " }

    " Run a macro on multiple visually selected lines 
    " https://github.com/stoeffel/.dotfiles/blob/master/vim/visual-at.vim
    xnoremap @ :<C-u>call ExecuteMacroOverVisualRange()<CR>
    function! ExecuteMacroOverVisualRange()
      echo "@".getcmdline()
      execute ":'<,'>normal @".nr2char(getchar())
    endfunction
" }

" Vim UI {
let g:solarized_termcolors=256
let g:solarized_termtrans=1
let g:solarized_contrast="normal"
let g:solarized_visibility="normal"
color solarized             " Load a colorscheme

syn keyword jsCommentTodo REFACTOR
syn keyword rubyTodo REFACTOR

set showmode                    " Display the current mode

set cursorline                  " Highlight current line

highlight clear SignColumn      " SignColumn should match background
highlight clear LineNr          " Current line number row will have same background color in relative mode

if has('cmdline_info')
  set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " A ruler on steroids
  set showcmd                 " Show partial commands in status line and
  " Selected characters/lines in visual mode
endif

if has('statusline')
  " Broken down into easily includeable segments
  set statusline=%<%f\                     " Filename
  set statusline+=%w%h%m%r                 " Options
  set statusline+=%{fugitive#statusline()} " Git Hotness
  set statusline+=\ [%{&ff}/%Y]            " Filetype
  set statusline+=\ [%{getcwd()}]          " Current dir
  set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info

  set linespace=0                 " No extra spaces between rows
  set number                      " Line numbers on
  set showmatch                   " Show matching brackets/parenthesis
  set hlsearch                    " Highlight search terms
  set winminheight=0              " Windows can be 0 line high
  set ignorecase                  " Case insensitive search
  set smartcase                   " Case sensitive when uc present
  set wildmode=list:longest,full  " Command <Tab> completion, list matches, then longest common part, then all.
  set whichwrap=b,s,h,l,<,>,[,]   " Backspace and cursor keys wrap too
  set scrolljump=5                " Lines to scroll when cursor leaves screen
  set foldenable                  " Auto fold code
endif
" }

" Formatting {
  set nowrap                      " Do not wrap long lines
  set shiftwidth=2                " Use indents of 4 spaces
  set expandtab                   " Tabs are spaces, not tabs
  set tabstop=2                   " An indentation every four columns
  set softtabstop=2               " Let backspace delete indent
  set nojoinspaces                " Prevents inserting two spaces after punctuation on a join (J)
  set splitright                  " Puts new vsplit windows to the right of the current
  set splitbelow                  " Puts new split windows to the bottom of the current
  set pastetoggle=<F12>           " pastetoggle (sane indentation on pastes)

  autocmd FileType c,cpp,java,go,php,javascript,puppet,python,rust,twig,xml,yml,perl,sql autocmd BufWritePre <buffer> call StripTrailingWhitespace()
  autocmd FileType python setlocal shiftwidth=4 softtabstop=4
  autocmd FileType crontab setlocal nobackup nowritebackup

  au BufRead,BufNewFile *.make set ft=dosini
  au BufRead,BufNewFile *.info set ft=dosini
  au BufRead,BufNewFile *.ctp set ft=php.html
  au BufRead,BufNewFile *.twig set ft=html
  au BufRead,BufNewFile *.handlebars set ft=html
  au BufRead,BufNewFile *.pp set ft=ruby

  " http://vim.wikia.com/wiki/Fix_syntax_highlighting
  noremap <F11> <Esc>:syntax sync fromstart<CR>
  inoremap <F11> <C-o>:syntax sync fromstart<CR>
" }

" Key (re)Mappings {
  let mapleader = ','

  " Wrapped lines goes down/up to next row, rather than next line in file.
  noremap j gj
  noremap k gk

  if has("user_commands")
    command! -bang -nargs=* -complete=file E e<bang> <args>
    command! -bang -nargs=* -complete=file W w<bang> <args>
    command! -bang -nargs=* -complete=file Wq wq<bang> <args>
    command! -bang -nargs=* -complete=file WQ wq<bang> <args>
    command! -bang Wa wa<bang>
    command! -bang WA wa<bang>
    command! -bang Q q<bang>
    command! -bang QA qa<bang>
    command! -bang Qa qa<bang>
  endif

  " Yank from the cursor to the end of the line, to be consistent with C and D.
  nnoremap Y y$

  " Code folding options
  nmap <leader>f0 :set foldlevel=0<CR>
  nmap <leader>f1 :set foldlevel=1<CR>
  nmap <leader>f2 :set foldlevel=2<CR>
  nmap <leader>f3 :set foldlevel=3<CR>
  nmap <leader>f4 :set foldlevel=4<CR>
  nmap <leader>f5 :set foldlevel=5<CR>
  nmap <leader>f6 :set foldlevel=6<CR>
  nmap <leader>f7 :set foldlevel=7<CR>
  nmap <leader>f8 :set foldlevel=8<CR>
  nmap <leader>f9 :set foldlevel=9<CR>
  nmap <leader>f- :set foldlevel=100<CR>

  " Find merge conflict markers
  map <leader>fc /\v^[<\|=>]{7}( .*\|$)<CR>

  " Shortcuts
  " Change Working Directory to that of the current file
  cmap cwd lcd %:p:h
  cmap cd. lcd %:p:h

  " Visual shifting (does not exit Visual mode)
  vnoremap < <gv
  vnoremap > >gv

  " For when you forget to sudo.. Really Write the file.
  cmap w!! w !sudo tee % >/dev/null

  " display all lines with keyword under cursor
  " and ask which one to jump to
  nmap <Leader>fif [I:let nr = input("Which one: ")<Bar>exe "normal " . nr ."[\t"<CR>
" }

" Plugins {
  " Misc {
    if isdirectory(expand("~/.vim/plugged/matchit.zip"))
      let b:match_ignorecase = 1
    endif
  " }

  " Ctags {
    set tags=./tags;/,~/.vimtags

    " Make tags placed in .git/tags file available in all levels of a repository
    let gitroot = substitute(system('git rev-parse --show-toplevel'), '[\n\r]', '', 'g')
    if gitroot != ''
      let &tags = &tags . ',' . gitroot . '/.git/tags'
    endif
  " }

  " TmuxNavigate {
    let g:tmux_navigator_no_mappings = 1
    let g:tmux_navigator_save_on_switch = 1
    nnoremap <silent> <C-H> :TmuxNavigateLeft<cr>
    nnoremap <silent> <C-J> :TmuxNavigateDown<cr>
    nnoremap <silent> <C-K> :TmuxNavigateUp<cr>
    nnoremap <silent> <C-L> :TmuxNavigateRight<cr>
  " }

  " Tests {
    nmap <Leader>t :TestNearest<cr>
    nmap <Leader>T :TestFile<cr>
  " }

  " tComment {
    map <leader>c <c-_><c-_>
  " }

  " Dash {
    nmap <silent> <leader>d <Plug>DashSearch
  " }

  " JSX {
    let g:jsx_ext_required = 0
  " }

  " neomake {
    let g:neomake_javascript_enabled_makers = ['eslint']
    let g:neomake_error_sign = {
      \ 'text': '>>',
      \ 'texthl': 'ErrorMsg',
      \ }
    autocmd! BufWritePost * Neomake
  " }

  " NerdTree {
    if isdirectory(expand("~/.vim/plugged/nerdtree"))
      map <C-e> :NERDTreeToggle<CR>
      map <leader>e :NERDTreeFind<CR>
      nmap <leader>nt :NERDTreeFind<CR>

      " let g:NERDTreeShutUp=1
      let NERDTreeShowBookmarks=1
      let NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$', '\.DS_Store$']
      let NERDTreeChDirMode=0
      " let NERDTreeQuitOnOpen=1
      let NERDTreeMouseMode=2
      let NERDTreeShowHidden=1
      let NERDTreeKeepTreeInNewTab=1
      let g:nerdtree_tabs_open_on_gui_startup=0
    endif
  " }

  " Tabularize {
    if isdirectory(expand("~/.vim/plugged/tabular"))
      nmap <Leader>a& :Tabularize /&<CR>
      vmap <Leader>a& :Tabularize /&<CR>
      nmap <Leader>a= :Tabularize /^[^=]*\zs=<CR>
      vmap <Leader>a= :Tabularize /^[^=]*\zs=<CR>
      nmap <Leader>a=> :Tabularize /=><CR>
      vmap <Leader>a=> :Tabularize /=><CR>
      nmap <Leader>a: :Tabularize /:<CR>
      vmap <Leader>a: :Tabularize /:<CR>
      nmap <Leader>a:: :Tabularize /:\zs<CR>
      vmap <Leader>a:: :Tabularize /:\zs<CR>
      nmap <Leader>a, :Tabularize /,<CR>
      vmap <Leader>a, :Tabularize /,<CR>
      nmap <Leader>a,, :Tabularize /,\zs<CR>
      vmap <Leader>a,, :Tabularize /,\zs<CR>
      nmap <Leader>a<Bar> :Tabularize /<Bar><CR>
      vmap <Leader>a<Bar> :Tabularize /<Bar><CR>
    endif
  " }

  " JSON {
    nmap <leader>jt <Esc>:%!python -m json.tool<CR><Esc>:set filetype=json<CR>
    let g:vim_json_syntax_conceal = 0
  " }

  " ctrlp {
    if isdirectory(expand("~/.vim/plugged/ctrlp.vim/"))
      " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
      let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
      " let g:ctrlp_clear_cache_on_exit = 0
      let g:ctrlp_dotfiles = 0
      let g:ctrlp_max_files=0
      let g:ctrlp_custom_ignore = {
        \ 'dir':  '\v[\/]\.?(atom|git|hg|svn|vim|vimbackup|vimswap|vimundo|viewviews|sass-cache|cache|node_module)$',
        \ 'file': '\v\.(exe|so|dll|pyc)$',
      \ }
      nnoremap <silent> <C-f> :CtrlPMixed<CR>
      nmap <leader>gf :CtrlP<CR><C-\>w
    endif
  "}

  " TagBar {
    if isdirectory(expand("~/.vim/plugged/tagbar/"))
      nnoremap <silent> <leader>tt :TagbarToggle<CR>
    endif
  "}

  " Close tag {
    if isdirectory(expand("~/.vim/plugged/vim-closetag/"))
      let g:closetag_filenames = "*.html,*.ctp,*.js"
    endif
  "}

  " Fugitive {
    if isdirectory(expand("~/.vim/plugged/vim-fugitive/"))
      nnoremap <silent> <leader>gs :Gstatus<CR>
      nnoremap <silent> <leader>gd :Gdiff<CR>
      nnoremap <silent> <leader>gc :Gcommit<CR>
      nnoremap <silent> <leader>gb :Gblame<CR>
      nnoremap <silent> <leader>gl :Glog<CR>
      nnoremap <silent> <leader>gp :Git push<CR>
      nnoremap <silent> <leader>gr :Gread<CR>
      nnoremap <silent> <leader>gw :Gwrite<CR>
      nnoremap <silent> <leader>ge :Gedit<CR>
      " Mnemonic _i_nteractive
      nnoremap <silent> <leader>gi :Git add -p %<CR>
    endif
  "}

  " YouCompleteMe {
    let g:acp_enableAtStartup = 0

    " enable completion from tags
    let g:ycm_collect_identifiers_from_tags_files = 1

    " remap Ultisnips for compatibility for YCM
    let g:UltiSnipsExpandTrigger = '<C-j>'
    let g:UltiSnipsJumpForwardTrigger = '<C-j>'
    let g:UltiSnipsJumpBackwardTrigger = '<C-k>'

    " Enable omni completion.
    autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
    autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
    autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
    autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
    autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc
    autocmd FileType php setlocal omnifunc=phpcomplete#CompletePHP

    " For snippet_complete marker.
    if !exists("g:spf13_no_conceal")
      if has('conceal')
        set conceallevel=2 concealcursor=i
      endif
    endif

    " Disable the neosnippet preview candidate window
    " When enabled, there can be too much visual noise
    " especially when splits are used.
    set completeopt-=preview
  " }

  " UndoTree {
    if isdirectory(expand("~/.vim/plugged/undotree/"))
      nnoremap <Leader>u :UndotreeToggle<CR>
      " If undotree is opened, it is likely one wants to interact with it.
      let g:undotree_SetFocusWhenToggle=1
    endif
  " }

  " indent_guides {
    if isdirectory(expand("~/.vim/plugged/vim-indent-guides/"))
      let g:indent_guides_start_level = 2
      let g:indent_guides_guide_size = 1
      let g:indent_guides_enable_on_vim_startup = 1
    endif
  " }

  " Wildfire {
    let g:wildfire_objects = {
      \ "*" : ["i'", 'i"', "i)", "i]", "i}", "ip"],
      \ "html,xml" : ["at"],
      \ }
  " }

  " vim-airline {
    " Set configuration options for the statusline plugin vim-airline.
    " Use the powerline theme and optionally enable powerline symbols.
    " To use the symbols , , , , , , and .in the statusline
    " segments add the following to your .vimrc.before.local file:
    "   let g:airline_powerline_fonts=1
    " If the previous symbols do not render for you then install a
    " powerline enabled font.

    " See `:echo g:airline_theme_map` for some more choices
    " Default in terminal vim is 'dark'
    if isdirectory(expand("~/.vim/plugged/vim-airline-themes/"))
      if !exists('g:airline_theme')
        let g:airline_theme = 'solarized'
      endif

      if !exists('g:airline_powerline_fonts')
        " Use the default set of separators with a few customizations
        let g:airline_left_sep='›'  " Slightly fancier than '>'
        let g:airline_right_sep='‹' " Slightly fancier than '<'
      endif
    endif
  " }
" }

" Functions {
  " Initialize directories {
    function! InitializeDirectories()
      let parent = $HOME
      let prefix = 'vim'
      let dir_list = {
        \ 'backup': 'backupdir',
        \ 'views': 'viewdir',
        \ 'swap': 'directory' }

      if has('persistent_undo')
        let dir_list['undo'] = 'undodir'
      endif

      let common_dir = parent . '/.' . prefix

      for [dirname, settingname] in items(dir_list)
        let directory = common_dir . dirname . '/'

        if exists("*mkdir")
          if !isdirectory(directory)
            call mkdir(directory)
          endif
        endif

        if !isdirectory(directory)
          echo "Warning: Unable to create backup directory: " . directory
          echo "Try: mkdir -p " . directory
        else
          let directory = substitute(directory, " ", "\\\\ ", "g")
          exec "set " . settingname . "=" . directory
        endif
      endfor
    endfunction

    call InitializeDirectories()
  " }

  " Strip whitespace {
    function! StripTrailingWhitespace()
      " Preparation: save last search, and cursor position.
      let _s=@/
      let l = line(".")
      let c = col(".")
      " do the business:
      %s/\s\+$//e
      " clean up: restore previous search history, and cursor position
      let @/=_s
      call cursor(l, c)
    endfunction
  " }

  " Shell command {
    function! s:RunShellCommand(cmdline)
      botright new

      setlocal buftype=nofile
      setlocal bufhidden=delete
      setlocal nobuflisted
      setlocal noswapfile
      setlocal nowrap
      setlocal filetype=shell
      setlocal syntax=shell

      call setline(1, a:cmdline)
      call setline(2, substitute(a:cmdline, '.', '=', 'g'))
      execute 'silent $read !' . escape(a:cmdline, '%#')
      setlocal nomodifiable
      1
    endfunction

    command! -complete=file -nargs=+ Shell call s:RunShellCommand(<q-args>)
    " e.g. Grep current file for <search_term>: Shell grep -Hn <search_term> %
  " }
" }
